{"source":2,"revision":19,"description":null,"createdBy":{"displayName":"Binod Gurung","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/21fb262c-ecbc-6065-b893-14b50f4c2247","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"id":"21fb262c-ecbc-6065-b893-14b50f4c2247","uniqueName":"binod.gurung@javra.com","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3","descriptor":"aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"},"createdOn":"2022-02-08T10:05:24.540Z","modifiedBy":{"displayName":"Binod Gurung","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/21fb262c-ecbc-6065-b893-14b50f4c2247","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"id":"21fb262c-ecbc-6065-b893-14b50f4c2247","uniqueName":"binod.gurung@javra.com","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3","descriptor":"aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"},"modifiedOn":"2022-03-24T06:52:07.433Z","isDeleted":false,"lastRelease":{"id":9795,"name":"Release 033 for build 1.0.23 pac-fillplates-ci","artifacts":[],"_links":{},"description":"Triggered by pac-fillplates-ci 1.0.23.","releaseDefinition":{"id":194,"projectReference":null,"_links":{}},"createdOn":"2022-05-26T04:49:51.540Z","createdBy":{"displayName":"Binod Gurung","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/21fb262c-ecbc-6065-b893-14b50f4c2247","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"id":"21fb262c-ecbc-6065-b893-14b50f4c2247","uniqueName":"binod.gurung@javra.com","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3","descriptor":"aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"variables":{"encryptedKey":{"value":null,"isSecret":true},"LimsServiceUrl":{"value":"$(CordysURL)"},"RunAsUser":{"value":"$(applicationUser)"},"RunAsUserPassword":{"value":"$(passwordUser)"},"TargetFolder":{"value":"E:\\TempFillPlates\\$(Release.EnvironmentName)"},"UEL:ApplicationID":{"value":"19"},"UEL:Enabled":{"value":"true"},"UEL:ServiceUrl":{"value":"$(CordysURL)"}},"variableGroups":[],"environments":[{"id":566,"name":"Test","rank":1,"owner":{"displayName":"Binod Gurung","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/21fb262c-ecbc-6065-b893-14b50f4c2247","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"id":"21fb262c-ecbc-6065-b893-14b50f4c2247","uniqueName":"binod.gurung@javra.com","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3","descriptor":"aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"},"variables":{"CordysURL":{"value":"https://bpmtst.enzazaden.com/cordys/com.eibus.web.soap.Gateway.wcp?"}},"variableGroups":[24,198],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":2168}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":2173},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":2174}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"healthPercent":0,"deploymentHealthOption":"Custom","tags":["pentaho-server"],"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_pac-fillplates-ci","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_ScheduledTaskManagement","artifactType":"PackageManagement","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":86,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":4,"name":"Deployment group job","refName":null,"workflowTasks":[{"environment":{},"taskId":"5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c","version":"2.*","name":"Copy Files","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SourceFolder":"$(System.DefaultWorkingDirectory)/_pac-fillplates-ci/fillplates/Enza.PAC.FillPlates/bin/Release","Contents":"**","TargetFolder":"$(TargetFolder)","CleanTargetFolder":"false","OverWrite":"true","flattenFolders":"false","preserveTimestamp":"false","retryCount":"0","delayBetweenRetries":"1000","ignoreMakeDirErrors":"false"}},{"environment":{},"taskId":"8d6e8f7e-267d-442d-8c92-1f586864c62f","version":"1.*","name":"Download Package TrippleDesEncryption","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageType":"nuget","feed":"/fb012ac9-1118-4623-9768-7d027ed5ae3f","view":" Local","definition":"2cc6e6b3-1715-4247-9a74-310a4a4227f7","version":"1.0.3","files":"**","extract":"true","downloadPath":"$(System.ArtifactsDirectory)/TrippleDesEncryption"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Encrypt password","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":". TrippleDesEncryption/TripleDesEncryption.ps1\n\nTry {\nWrite-Output 'innnnnn'\n$input = '$(applicationUser)' + '|' + '$(passwordUser)'\nWrite-Output $input\n$encryptedText = Get-EncryptedText -Text $input -Key \"$(encryptedKey)\"\nWrite-Output $encryptedText\nWrite-Host \"##vso[task.setvariable variable=SVC:Credentials]$encryptedText\"\n}\nCatch {\nWrite-Error \"An error occurred while encrypting the username and password\"\n}","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}},{"environment":{},"taskId":"8ce97e91-56cc-4743-bfab-9a9315be5f27","version":"1.*","name":"File Transform","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"folderPath":"$(TargetFolder)","enableXmlTransform":"false","xmlTransformationRules":"-transform **\\*.Release.config -xml **\\*.config","fileType":"xml","targetFiles":"**\\*.config"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Indented SecurityPolicy","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# make sure packageProvider is installed\nif(!(Get-PackageProvider NuGet)) { \n   Install-PackageProvider Nuget -ForceBootstrap -Force\n}\n\n# lets make sure the Indented SecurityPolicy module is installed\nif (Get-Module -ListAvailable -Name Indented.SecurityPolicy) {\n    Write-Output \"Module exists\"\n} \nelse {\n    Write-Output \"Module does not exist... Installing...\"\n    Install-Module -Name Indented.SecurityPolicy -Force \n}\n\nif (![bool](Get-UserRight -Name SeBatchLogonRight | ? {$_.AccountName -eq \"$(RunAsUser)\"})) {\n    # dont use Set-UserRight it removes all users\n    Write-Output \"User has no access rights... Attempting to add it...\"\n    Grant-UserRight -Name SeBatchLogonRight -AccountName \"$(RunAsUser)\"  \n    Write-Output \"Done\"  \n}\n\n","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Create scheduled task","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$LibPath = \"$(System.DefaultWorkingDirectory)/_ScheduledTaskManagement/ScheduledTaskManagement.ps1\"\nImport-Module $LibPath\n\nFunction Create-ScheduledTask1\n{\n\tparam(\n        [Parameter(Position=0, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$ComputerName = \"localhost\",\n\n        [Parameter(Position=1, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$RunAsUser=\"System\",\n\n        [Parameter(Position=2, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$RunAsUserPassword,\n\n        [Parameter(Position=3, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskName,\n\n        [Parameter(Position=4, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskLocation,\n\n        [Parameter(Position=5, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskRun,\n\n        [Parameter(Position=6, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$Schedule = \"Daily\",\n\n        [Parameter(Position=7, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$StartTime,\n\n        [Parameter(Position=8, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$EndTime,\n\n        [Parameter(Position=9, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$Interval = \"1\",\n\n\t\t[Parameter(Position=10, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$StartDate,\n\n\t\t[Parameter(Position=11, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$Parameters,\n\n        [Parameter(Position=12, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$HighestRunLevel = $false,\n\n        [Parameter(Position=13, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[switch]$Indefinently\n\t)\n    $taskLocationAndName = Join-Path $TaskLocation $TaskName\n\n    $cmdRunAsUser = if((-not [string]::IsNullOrWhiteSpace($RunAsUser)) -and (-not [string]::IsNullOrWhiteSpace($RunAsUserPassword))){\"/ru '$RunAsUser' /rp '$RunAsUserPassword'\"} else {''}\n\n    if($RunAsUser -match 'System') {\n        $cmdRunAsUser = \"/ru $RunAsUser\"\n    }\n\n\t# Case insensitive by default; different tasks require different sets of parameters\n\tswitch ($Schedule)\n    {\n        \"Daily\"\n                {\n                    if (!($Indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        \"Hourly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /F\"\n                    }\n                }\n        \"Minute\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /F\"\n                    }\n                }\n        \"Once\"\n                {\n                    $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /st $StartTime /F\"\n                }\n        \"Weekly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        \"Monthly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        default {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n    }\n\n\tif ($StartDate)\n\t{\n\t\t$Command += \" /sd `\"$StartDate`\"\"\n\t}\n\n    if ($HighestRunLevel -eq \"TrUe\")\n    {\n        $Command += \" /RL HIGHEST\"\n    }\n\n\tInvoke-Expression $Command\n}\n\n$TaskFolder = \"PAC\"\n$TaskName = \"$(Release.EnvironmentName)_pac_fillplates_task\"\n$Exe = \"$(TargetFolder)\\FillPlates.exe\"\n$RunAsUser = \"$(RunAsUser)\"\n$RunAsUserPassword = '$(RunAsUserPassword)'\n$ComputerName = \"localhost\"\n$Schedule = \"Daily\"\n$StartTime = '02:15'\n$Interval = \"1\"\n$Indefinently = $true\n\nif ((Exists-ScheduledTask -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder) -eq $true)\n{\n\tRemove-ScheduledTask -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder\n}\nCreate-ScheduledTask1 -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder -TaskRun $Exe -Schedule $Schedule -Interval $Interval -StartTime $StartTime -Indefinently $Indefinently -RunAsUser $RunAsUser -RunAsUserPassword $RunAsUserPassword","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""},{"name":"_pac-fillplates-ci","conditionType":4,"value":"{\"sourceBranch\":\"development\",\"tags\":[],\"useBuildDefinitionBranch\":false,\"createReleaseOnBuildTagging\":false}"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":9579,"url":"https://vsrm.dev.azure.com/enzazaden/a68d74e9-7094-452a-a3c3-1c63de05667f/_apis/Release/releases/9579","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"LinkBoardsWorkItems":{"$type":"System.String","$value":"True"},"BoardsEnvironmentType":{"$type":"System.String","$value":"testing"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/enzazaden/_apis/public/Release/badge/a68d74e9-7094-452a-a3c3-1c63de05667f/194/566"},{"id":567,"name":"Acceptance","rank":2,"owner":{"displayName":"Binod Gurung","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/21fb262c-ecbc-6065-b893-14b50f4c2247","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"id":"21fb262c-ecbc-6065-b893-14b50f4c2247","uniqueName":"binod.gurung@javra.com","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3","descriptor":"aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"},"variables":{"CordysURL":{"value":"https://bpmacc.enzazaden.com/cordys/com.eibus.web.soap.Gateway.wcp?"}},"variableGroups":[65,199],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[Enza Zaden All]\\Pac Approvers","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/d6f8d709-3dfc-4b2a-8e78-2a35a4b73e6b","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0zOTE2NzI5NzY2LTI0OTAzNzg4MjEtMjc0NzQ3Mjk5NS0zNzI0ODk1ODcxLTEtMjI0MjQ1OTg0Ny01OTkyNjIwMzAtMjQ0NzQzODcxNy0xNzQ3MDA2OTI"}},"id":"d6f8d709-3dfc-4b2a-8e78-2a35a4b73e6b","uniqueName":"vstfs:///Classification/TeamProject/a68d74e9-7094-452a-a3c3-1c63de05667f\\Pac Approvers","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0zOTE2NzI5NzY2LTI0OTAzNzg4MjEtMjc0NzQ3Mjk5NS0zNzI0ODk1ODcxLTEtMjI0MjQ1OTg0Ny01OTkyNjIwMzAtMjQ0NzQzODcxNy0xNzQ3MDA2OTI","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0zOTE2NzI5NzY2LTI0OTAzNzg4MjEtMjc0NzQ3Mjk5NS0zNzI0ODk1ODcxLTEtMjI0MjQ1OTg0Ny01OTkyNjIwMzAtMjQ0NzQzODcxNy0xNzQ3MDA2OTI"},"id":2169}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":2172},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":2175}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"healthPercent":0,"deploymentHealthOption":"Custom","tags":["pentaho-server"],"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_ScheduledTaskManagement","artifactType":"PackageManagement","artifactDownloadMode":"All","artifactItems":[]},{"alias":"_pac-fillplates-ci","artifactType":"Build","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":86,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":4,"name":"Deployment group job","refName":null,"workflowTasks":[{"environment":{},"taskId":"5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c","version":"2.*","name":"Copy Files","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SourceFolder":"$(System.DefaultWorkingDirectory)/_pac-fillplates-ci/fillplates/Enza.PAC.FillPlates/bin/Release/","Contents":"**","TargetFolder":"$(TargetFolder)","CleanTargetFolder":"false","OverWrite":"true","flattenFolders":"false","preserveTimestamp":"false","retryCount":"0","delayBetweenRetries":"1000","ignoreMakeDirErrors":"false"}},{"environment":{},"taskId":"8d6e8f7e-267d-442d-8c92-1f586864c62f","version":"1.*","name":"Download Package TrippleDesEncryption","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageType":"nuget","feed":"/fb012ac9-1118-4623-9768-7d027ed5ae3f","view":"Local","definition":"2cc6e6b3-1715-4247-9a74-310a4a4227f7","version":"1.0.3","files":"**","extract":"true","downloadPath":"$(System.ArtifactsDirectory)/TrippleDesEncryption"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Encrypt password","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":". TrippleDesEncryption/TripleDesEncryption.ps1\n\nTry {\n$input = '$(applicationUser)' + '|' + '$(passwordUser)'\n$encryptedText = Get-EncryptedText -Text $input -Key \"$(encryptedKey)\"\nWrite-Host \"##vso[task.setvariable variable=SVC:Credentials]$encryptedText\"\n}\nCatch {\nWrite-Error \"An error occurred while encrypting the username and password\"\n}","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}},{"environment":{},"taskId":"8ce97e91-56cc-4743-bfab-9a9315be5f27","version":"1.*","name":"File Transform","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"folderPath":"$(TargetFolder)","enableXmlTransform":"false","xmlTransformationRules":"-transform **\\*.Release.config -xml **\\*.config","fileType":"xml","targetFiles":"**\\*.config"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Indented SecurityPolicy","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# make sure packageProvider is installed\nif(!(Get-PackageProvider NuGet)) { \n   Install-PackageProvider Nuget -ForceBootstrap -Force\n}\n\n# lets make sure the Indented SecurityPolicy module is installed\nif (Get-Module -ListAvailable -Name Indented.SecurityPolicy) {\n    Write-Output \"Module exists\"\n} \nelse {\n    Write-Output \"Module does not exist... Installing...\"\n    Install-Module -Name Indented.SecurityPolicy -Force \n}\n\nif (![bool](Get-UserRight -Name SeBatchLogonRight | ? {$_.AccountName -eq \"$(RunAsUser)\"})) {\n    # dont use Set-UserRight it removes all users\n    Write-Output \"User has no access rights... Attempting to add it...\"\n    Grant-UserRight -Name SeBatchLogonRight -AccountName \"$(RunAsUser)\"  \n    Write-Output \"Done\"  \n}\n\n","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Create scheduled task","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$LibPath = \"$(System.DefaultWorkingDirectory)/_ScheduledTaskManagement/ScheduledTaskManagement.ps1\"\nImport-Module $LibPath\n\nFunction Create-ScheduledTask1\n{\n\tparam(\n        [Parameter(Position=0, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$ComputerName = \"localhost\",\n\n        [Parameter(Position=1, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$RunAsUser=\"System\",\n\n        [Parameter(Position=2, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$RunAsUserPassword,\n\n        [Parameter(Position=3, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskName,\n\n        [Parameter(Position=4, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskLocation,\n\n        [Parameter(Position=5, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskRun,\n\n        [Parameter(Position=6, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$Schedule = \"Daily\",\n\n        [Parameter(Position=7, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$StartTime,\n\n        [Parameter(Position=8, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$EndTime,\n\n        [Parameter(Position=9, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$Interval = \"1\",\n\n\t\t[Parameter(Position=10, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$StartDate,\n\n\t\t[Parameter(Position=11, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$Parameters,\n\n        [Parameter(Position=12, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$HighestRunLevel = $false,\n\n        [Parameter(Position=13, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[switch]$Indefinently\n\t)\n    $taskLocationAndName = Join-Path $TaskLocation $TaskName\n\n    $cmdRunAsUser = if((-not [string]::IsNullOrWhiteSpace($RunAsUser)) -and (-not [string]::IsNullOrWhiteSpace($RunAsUserPassword))){\"/ru '$RunAsUser' /rp '$RunAsUserPassword'\"} else {''}\n\n    if($RunAsUser -match 'System') {\n        $cmdRunAsUser = \"/ru $RunAsUser\"\n    }\n\n\t# Case insensitive by default; different tasks require different sets of parameters\n\tswitch ($Schedule)\n    {\n        \"Daily\"\n                {\n                    if (!($Indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        \"Hourly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /F\"\n                    }\n                }\n        \"Minute\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /F\"\n                    }\n                }\n        \"Once\"\n                {\n                    $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /st $StartTime /F\"\n                }\n        \"Weekly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        \"Monthly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        default {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n    }\n\n\tif ($StartDate)\n\t{\n\t\t$Command += \" /sd `\"$StartDate`\"\"\n\t}\n\n    if ($HighestRunLevel -eq \"TrUe\")\n    {\n        $Command += \" /RL HIGHEST\"\n    }\n\n\tInvoke-Expression $Command\n}\n\n$TaskFolder = \"PAC\"\n$TaskName = \"$(Release.EnvironmentName)_pac_fillplates_task\"\n$Exe = \"$(TargetFolder)\\FillPlates.exe\"\n$RunAsUser = \"$(RunAsUser)\"\n$RunAsUserPassword = '$(RunAsUserPassword)'\n$ComputerName = \"localhost\"\n$Schedule = \"Daily\"\n$StartTime = '02:15'\n$Interval = \"1\"\n$Indefinently = $true\n\nif ((Exists-ScheduledTask -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder) -eq $true)\n{\n\tRemove-ScheduledTask -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder\n}\nCreate-ScheduledTask1 -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder -TaskRun $Exe -Schedule $Schedule -Interval $Interval -StartTime $StartTime -Indefinently $Indefinently -RunAsUser $RunAsUser -RunAsUserPassword $RunAsUserPassword","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"ReleaseStarted","conditionType":1,"value":""},{"name":"_pac-fillplates-ci","conditionType":4,"value":"{\"sourceBranch\":\"release\",\"tags\":[],\"useBuildDefinitionBranch\":false,\"createReleaseOnBuildTagging\":false}"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":9795,"url":"https://vsrm.dev.azure.com/enzazaden/a68d74e9-7094-452a-a3c3-1c63de05667f/_apis/Release/releases/9795","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"LinkBoardsWorkItems":{"$type":"System.String","$value":"True"},"BoardsEnvironmentType":{"$type":"System.String","$value":"staging"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/enzazaden/_apis/public/Release/badge/a68d74e9-7094-452a-a3c3-1c63de05667f/194/567"},{"id":568,"name":"Production","rank":3,"owner":{"displayName":"Binod Gurung","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/21fb262c-ecbc-6065-b893-14b50f4c2247","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"}},"id":"21fb262c-ecbc-6065-b893-14b50f4c2247","uniqueName":"binod.gurung@javra.com","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3","descriptor":"aad.MjFmYjI2MmMtZWNiYy03MDY1LWI4OTMtMTRiNTBmNGMyMjQ3"},"variables":{"CordysURL":{"value":"https://bpm.enzazaden.com/cordys/com.eibus.web.soap.Gateway.wcp?"}},"variableGroups":[66,200],"preDeployApprovals":{"approvals":[{"rank":1,"isAutomated":false,"isNotificationOn":false,"approver":{"displayName":"[Enza Zaden All]\\Pac Approvers","url":"https://spsprodweu4.vssps.visualstudio.com/Add7bda75-b3c1-400b-a539-739604f82614/_apis/Identities/d6f8d709-3dfc-4b2a-8e78-2a35a4b73e6b","_links":{"avatar":{"href":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0zOTE2NzI5NzY2LTI0OTAzNzg4MjEtMjc0NzQ3Mjk5NS0zNzI0ODk1ODcxLTEtMjI0MjQ1OTg0Ny01OTkyNjIwMzAtMjQ0NzQzODcxNy0xNzQ3MDA2OTI"}},"id":"d6f8d709-3dfc-4b2a-8e78-2a35a4b73e6b","uniqueName":"vstfs:///Classification/TeamProject/a68d74e9-7094-452a-a3c3-1c63de05667f\\Pac Approvers","imageUrl":"https://dev.azure.com/enzazaden/_apis/GraphProfile/MemberAvatars/vssgp.Uy0xLTktMTU1MTM3NDI0NS0zOTE2NzI5NzY2LTI0OTAzNzg4MjEtMjc0NzQ3Mjk5NS0zNzI0ODk1ODcxLTEtMjI0MjQ1OTg0Ny01OTkyNjIwMzAtMjQ0NzQzODcxNy0xNzQ3MDA2OTI","isContainer":true,"descriptor":"vssgp.Uy0xLTktMTU1MTM3NDI0NS0zOTE2NzI5NzY2LTI0OTAzNzg4MjEtMjc0NzQ3Mjk5NS0zNzI0ODk1ODcxLTEtMjI0MjQ1OTg0Ny01OTkyNjIwMzAtMjQ0NzQzODcxNy0xNzQ3MDA2OTI"},"id":2170}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":true,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":1}},"deployStep":{"id":2171},"postDeployApprovals":{"approvals":[{"rank":1,"isAutomated":true,"isNotificationOn":false,"id":2176}],"approvalOptions":{"requiredApproverCount":null,"releaseCreatorCanBeApprover":false,"autoTriggeredAndPreviousEnvironmentApprovedCanBeSkipped":false,"enforceIdentityRevalidation":false,"timeoutInMinutes":0,"executionOrder":2}},"deployPhases":[{"deploymentInput":{"healthPercent":0,"deploymentHealthOption":"Custom","tags":["pentaho-server"],"skipArtifactsDownload":false,"artifactsDownloadInput":{"downloadInputs":[{"alias":"_ScheduledTaskManagement","artifactType":"PackageManagement","artifactDownloadMode":"All","artifactItems":[]}]},"queueId":88,"demands":[],"enableAccessToken":false,"timeoutInMinutes":0,"jobCancelTimeoutInMinutes":1,"condition":"succeeded()","overrideInputs":{}},"rank":1,"phaseType":4,"name":"Deployment group job","refName":null,"workflowTasks":[{"environment":{},"taskId":"5bfb729a-a7c8-4a78-a7c3-8d717bb7c13c","version":"2.*","name":"Copy Files","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"SourceFolder":"$(System.DefaultWorkingDirectory)/_pac-fillplates-ci/fillplates/Enza.PAC.FillPlates/bin/Release","Contents":"**","TargetFolder":"$(TargetFolder)","CleanTargetFolder":"false","OverWrite":"true","flattenFolders":"false","preserveTimestamp":"false","retryCount":"0","delayBetweenRetries":"1000","ignoreMakeDirErrors":"false"}},{"environment":{},"taskId":"8d6e8f7e-267d-442d-8c92-1f586864c62f","version":"1.*","name":"Download Package TrippleDesEncryption","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"packageType":"nuget","feed":"/fb012ac9-1118-4623-9768-7d027ed5ae3f","view":" Local","definition":"2cc6e6b3-1715-4247-9a74-310a4a4227f7","version":"1.0.3","files":"**","extract":"true","downloadPath":"$(System.ArtifactsDirectory)/TrippleDesEncryption"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Encrypt password","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":". TrippleDesEncryption/TripleDesEncryption.ps1\n\nTry {\n$input = '$(applicationUser)' + '|' + '$(passwordUser)'\n$encryptedText = Get-EncryptedText -Text $input -Key \"$(encryptedKey)\"\nWrite-Host \"##vso[task.setvariable variable=SVC:Credentials]$encryptedText\"\n}\nCatch {\nWrite-Error \"An error occurred while encrypting the username and password\"\n}","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}},{"environment":{},"taskId":"8ce97e91-56cc-4743-bfab-9a9315be5f27","version":"1.*","name":"File Transform","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"folderPath":"$(TargetFolder)","enableXmlTransform":"false","xmlTransformationRules":"-transform **\\*.Release.config -xml **\\*.config","fileType":"xml","targetFiles":"**\\*.config"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Indented SecurityPolicy","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"# make sure packageProvider is installed\nif(!(Get-PackageProvider NuGet)) { \n   Install-PackageProvider Nuget -ForceBootstrap -Force\n}\n\n# lets make sure the Indented SecurityPolicy module is installed\nif (Get-Module -ListAvailable -Name Indented.SecurityPolicy) {\n    Write-Output \"Module exists\"\n} \nelse {\n    Write-Output \"Module does not exist... Installing...\"\n    Install-Module -Name Indented.SecurityPolicy -Force \n}\n\nif (![bool](Get-UserRight -Name SeBatchLogonRight | ? {$_.AccountName -eq \"$(RunAsUser)\"})) {\n    # dont use Set-UserRight it removes all users\n    Write-Output \"User has no access rights... Attempting to add it...\"\n    Grant-UserRight -Name SeBatchLogonRight -AccountName \"$(RunAsUser)\"  \n    Write-Output \"Done\"  \n}\n\n","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}},{"environment":{},"taskId":"e213ff0f-5d5c-4791-802d-52ea3e7be1f1","version":"2.*","name":"Create scheduled task","refName":"","enabled":true,"alwaysRun":false,"continueOnError":false,"timeoutInMinutes":0,"retryCountOnTaskFailure":0,"definitionType":"task","overrideInputs":{},"condition":"succeeded()","inputs":{"targetType":"inline","filePath":"","arguments":"","script":"$LibPath = \"$(System.DefaultWorkingDirectory)/_ScheduledTaskManagement/ScheduledTaskManagement.ps1\"\nImport-Module $LibPath\n\nFunction Create-ScheduledTask1\n{\n\tparam(\n        [Parameter(Position=0, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$ComputerName = \"localhost\",\n\n        [Parameter(Position=1, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$RunAsUser=\"System\",\n\n        [Parameter(Position=2, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$RunAsUserPassword,\n\n        [Parameter(Position=3, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskName,\n\n        [Parameter(Position=4, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskLocation,\n\n        [Parameter(Position=5, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$TaskRun,\n\n        [Parameter(Position=6, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$Schedule = \"Daily\",\n\n        [Parameter(Position=7, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$StartTime,\n\n        [Parameter(Position=8, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$EndTime,\n\n        [Parameter(Position=9, Mandatory=$True, ValueFromPipeline=$True)]\n\t\t[string]$Interval = \"1\",\n\n\t\t[Parameter(Position=10, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$StartDate,\n\n\t\t[Parameter(Position=11, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$Parameters,\n\n        [Parameter(Position=12, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[string]$HighestRunLevel = $false,\n\n        [Parameter(Position=13, Mandatory=$False, ValueFromPipeline=$True)]\n\t\t[switch]$Indefinently\n\t)\n    $taskLocationAndName = Join-Path $TaskLocation $TaskName\n\n    $cmdRunAsUser = if((-not [string]::IsNullOrWhiteSpace($RunAsUser)) -and (-not [string]::IsNullOrWhiteSpace($RunAsUserPassword))){\"/ru '$RunAsUser' /rp '$RunAsUserPassword'\"} else {''}\n\n    if($RunAsUser -match 'System') {\n        $cmdRunAsUser = \"/ru $RunAsUser\"\n    }\n\n\t# Case insensitive by default; different tasks require different sets of parameters\n\tswitch ($Schedule)\n    {\n        \"Daily\"\n                {\n                    if (!($Indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        \"Hourly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /F\"\n                    }\n                }\n        \"Minute\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /F\"\n                    }\n                }\n        \"Once\"\n                {\n                    $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /st $StartTime /F\"\n                }\n        \"Weekly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        \"Monthly\"\n                {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n        default {\n                    if (!($indefinently))\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /et $EndTime /F\"\n                    }\n                    else\n                    {\n                        $Command = \"schtasks.exe /create $cmdRunAsUser /s `\"$ComputerName`\" /tn `\"$taskLocationAndName`\" /tr `\"$TaskRun $Parameters`\" /sc $Schedule /mo $Interval /st $StartTime /F\"\n                    }\n                }\n    }\n\n\tif ($StartDate)\n\t{\n\t\t$Command += \" /sd `\"$StartDate`\"\"\n\t}\n\n    if ($HighestRunLevel -eq \"TrUe\")\n    {\n        $Command += \" /RL HIGHEST\"\n    }\n\n\tInvoke-Expression $Command\n}\n\n$TaskFolder = \"PAC\"\n$TaskName = \"$(Release.EnvironmentName)_pac_fillplates_task\"\n$Exe = \"$(TargetFolder)\\FillPlates.exe\"\n$RunAsUser = \"$(RunAsUser)\"\n$RunAsUserPassword = '$(RunAsUserPassword)'\n$ComputerName = \"localhost\"\n$Schedule = \"Daily\"\n$StartTime = '02:15'\n$Interval = \"1\"\n$Indefinently = $true\n\nif ((Exists-ScheduledTask -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder) -eq $true)\n{\n\tRemove-ScheduledTask -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder\n}\nCreate-ScheduledTask1 -ComputerName $ComputerName -TaskName $TaskName -TaskLocation $TaskFolder -TaskRun $Exe -Schedule $Schedule -Interval $Interval -StartTime $StartTime -Indefinently $Indefinently -RunAsUser $RunAsUser -RunAsUserPassword $RunAsUserPassword","errorActionPreference":"stop","warningPreference":"default","informationPreference":"default","verbosePreference":"default","debugPreference":"default","failOnStderr":"false","showWarnings":"false","ignoreLASTEXITCODE":"false","pwsh":"false","workingDirectory":"","runScriptInSeparateScope":"false"}}]}],"environmentOptions":{"emailNotificationType":"OnlyOnFailure","emailRecipients":"release.environment.owner;release.creator","skipArtifactsDownload":false,"timeoutInMinutes":0,"enableAccessToken":false,"publishDeploymentStatus":true,"badgeEnabled":false,"autoLinkWorkItems":false,"pullRequestDeploymentEnabled":false},"demands":[],"conditions":[{"name":"Acceptance","conditionType":2,"value":"4"}],"executionPolicy":{"concurrencyCount":1,"queueDepthCount":0},"schedules":[],"currentRelease":{"id":9795,"url":"https://vsrm.dev.azure.com/enzazaden/a68d74e9-7094-452a-a3c3-1c63de05667f/_apis/Release/releases/9795","_links":{}},"retentionPolicy":{"daysToKeep":30,"releasesToKeep":3,"retainBuild":true},"processParameters":{},"properties":{"LinkBoardsWorkItems":{"$type":"System.String","$value":"True"},"BoardsEnvironmentType":{"$type":"System.String","$value":"production"}},"preDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"postDeploymentGates":{"id":0,"gatesOptions":null,"gates":[]},"environmentTriggers":[],"badgeUrl":"https://vsrm.dev.azure.com/enzazaden/_apis/public/Release/badge/a68d74e9-7094-452a-a3c3-1c63de05667f/194/568"}],"artifacts":[{"sourceId":"a68d74e9-7094-452a-a3c3-1c63de05667f:390","type":"Build","alias":"_pac-fillplates-ci","definitionReference":{"artifactSourceDefinitionUrl":{"id":"https://dev.azure.com/enzazaden/_permalink/_build/index?collectionId=9072c9c8-e1fc-4107-86b1-2761f01c04ac&projectId=a68d74e9-7094-452a-a3c3-1c63de05667f&definitionId=390","name":""},"defaultVersionBranch":{"id":"","name":""},"defaultVersionSpecific":{"id":"","name":""},"defaultVersionTags":{"id":"","name":""},"defaultVersionType":{"id":"latestType","name":"Latest"},"definition":{"id":"390","name":"pac-fillplates-ci"},"definitions":{"id":"","name":""},"IsMultiDefinitionType":{"id":"False","name":"False"},"project":{"id":"a68d74e9-7094-452a-a3c3-1c63de05667f","name":"Enza Zaden All"},"repository":{"id":"","name":""}},"isPrimary":true,"isRetained":false},{"sourceId":"fb012ac9-1118-4623-9768-7d027ed5ae3f:49e69b88-f08d-4e6b-8906-b6d8f5849e29","type":"PackageManagement","alias":"_ScheduledTaskManagement","definitionReference":{"defaultVersionSpecific":{"id":"","name":""},"defaultVersionType":{"id":"latestType","name":"Latest"},"definition":{"id":"49e69b88-f08d-4e6b-8906-b6d8f5849e29","name":"ScheduledTaskManagement"},"feed":{"id":"fb012ac9-1118-4623-9768-7d027ed5ae3f","name":"PowershellServiceFeed"},"files":{"id":"**","name":"**"},"packageType":{"id":"nuget","name":"NuGet"},"skipextract":{"id":"","name":""},"view":{"id":"","name":""}},"isRetained":false}],"triggers":[{"artifactAlias":"_pac-fillplates-ci","triggerConditions":[],"triggerType":1}],"releaseNameFormat":"Release $(Rev:rrr) for build $(Build.BuildNumber) $(Build.DefinitionName)","tags":[],"properties":{"DefinitionCreationSource":{"$type":"System.String","$value":"ReleaseClone"},"IntegrateJiraWorkItems":{"$type":"System.String","$value":"false"},"IntegrateBoardsWorkItems":{"$type":"System.String","$value":"True"}},"id":194,"name":"pacfillplates","path":"\\Research and Development","projectReference":null,"url":"https://vsrm.dev.azure.com/enzazaden/a68d74e9-7094-452a-a3c3-1c63de05667f/_apis/Release/definitions/194","_links":{"self":{"href":"https://vsrm.dev.azure.com/enzazaden/a68d74e9-7094-452a-a3c3-1c63de05667f/_apis/Release/definitions/194"},"web":{"href":"https://dev.azure.com/enzazaden/a68d74e9-7094-452a-a3c3-1c63de05667f/_release?definitionId=194"}}}